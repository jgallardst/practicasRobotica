// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `RGBD.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RGBD_h__
#define __RGBD_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <JointMotor.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompRGBD
{

class RGBD;
class RGBDPrx;

}

namespace RoboCompRGBD
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    HardwareFailedException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

static HardwareFailedException _iceS_HardwareFailedException_init;

enum class Registration : unsigned char
{
    None,
    DepthInColor,
    ColorInDepth
};

using imgType = ::std::vector<::Ice::Byte>;

using depthType = ::std::vector<float>;

struct ColorRGB
{
    ::Ice::Byte red;
    ::Ice::Byte green;
    ::Ice::Byte blue;

    std::tuple<const ::Ice::Byte&, const ::Ice::Byte&, const ::Ice::Byte&> ice_tuple() const
    {
        return std::tie(red, green, blue);
    }
};

struct PointXYZ
{
    float x;
    float y;
    float z;
    float w;

    std::tuple<const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, z, w);
    }
};

using DepthSeq = ::std::vector<float>;

using ColorSeq = ::std::vector<::RoboCompRGBD::ColorRGB>;

using PointSeq = ::std::vector<::RoboCompRGBD::PointXYZ>;

struct CameraParameters
{
    int focal;
    int width;
    int height;
    int size;
    int FPS;

    std::tuple<const int&, const int&, const int&, const int&, const int&> ice_tuple() const
    {
        return std::tie(focal, width, height, size, FPS);
    }
};

struct TRGBDParams
{
    ::RoboCompRGBD::CameraParameters color;
    ::RoboCompRGBD::CameraParameters depth;
    int timerPeriod;
    bool talkToBase;
    bool talkToJointMotor;
    ::std::string driver;
    ::std::string device;

    std::tuple<const ::RoboCompRGBD::CameraParameters&, const ::RoboCompRGBD::CameraParameters&, const int&, const bool&, const bool&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(color, depth, timerPeriod, talkToBase, talkToJointMotor, driver, device);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompRGBD
{

class RGBD : public virtual ::Ice::Object
{
public:

    using ProxyType = RGBDPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Current&) = 0;
    bool _iceD_getRGBDParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRegistration(::RoboCompRGBD::Registration, const ::Ice::Current&) = 0;
    bool _iceD_setRegistration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompRGBD::Registration getRegistration(const ::Ice::Current&) = 0;
    bool _iceD_getRegistration(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetDataResult
    {
        ::RoboCompRGBD::imgType rgbMatrix;
        ::RoboCompRGBD::depthType distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getData(::RoboCompRGBD::imgType&, ::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetDepthInIRResult
    {
        ::RoboCompRGBD::depthType distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getDepthInIR(::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getDepthInIR(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetImageResult
    {
        ::RoboCompRGBD::ColorSeq color;
        ::RoboCompRGBD::DepthSeq depth;
        ::RoboCompRGBD::PointSeq points;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getImage(::RoboCompRGBD::ColorSeq&, ::RoboCompRGBD::DepthSeq&, ::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetDepthResult
    {
        ::RoboCompRGBD::DepthSeq depth;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getDepth(::RoboCompRGBD::DepthSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getDepth(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetRGBResult
    {
        ::RoboCompRGBD::ColorSeq color;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getRGB(::RoboCompRGBD::ColorSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getRGB(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetXYZResult
    {
        ::RoboCompRGBD::PointSeq points;
        ::RoboCompJointMotor::MotorStateMap hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getXYZ(::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getXYZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompRGBD
{

class RGBDPrx : public virtual ::Ice::Proxy<RGBDPrx, ::Ice::ObjectPrx>
{
public:

    ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompRGBD::TRGBDParams>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getRGBDParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRGBDParamsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::TRGBDParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::TRGBDParams, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getRGBDParams, context);
    }

    ::std::function<void()>
    getRGBDParamsAsync(::std::function<void(::RoboCompRGBD::TRGBDParams)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBD::TRGBDParams>(response, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getRGBDParams, context);
    }

    void _iceI_getRGBDParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::TRGBDParams>>&, const ::Ice::Context&);

    void setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_setRegistration, iceP_value, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setRegistrationAsync(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_setRegistration, iceP_value, context);
    }

    ::std::function<void()>
    setRegistrationAsync(::RoboCompRGBD::Registration iceP_value,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_setRegistration, iceP_value, context);
    }

    void _iceI_setRegistration(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, ::RoboCompRGBD::Registration, const ::Ice::Context&);

    ::RoboCompRGBD::Registration getRegistration(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompRGBD::Registration>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getRegistration, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getRegistrationAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::Registration>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::Registration, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getRegistration, context);
    }

    ::std::function<void()>
    getRegistrationAsync(::std::function<void(::RoboCompRGBD::Registration)> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBD::Registration>(response, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getRegistration, context);
    }

    void _iceI_getRegistration(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::Registration>>&, const ::Ice::Context&);

    void getData(::RoboCompRGBD::imgType& iceP_rgbMatrix, ::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetDataResult>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getData, context).get();
        iceP_rgbMatrix = ::std::move(result.rgbMatrix);
        iceP_distanceMatrix = ::std::move(result.distanceMatrix);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getDataAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::RGBD::GetDataResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetDataResult, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getData, context);
    }

    ::std::function<void()>
    getDataAsync(::std::function<void(::RoboCompRGBD::imgType, ::RoboCompRGBD::depthType, ::RoboCompJointMotor::MotorStateMap, ::RoboCompGenericBase::TBaseState)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompRGBD::RGBD::GetDataResult&& result)
        {
            response(::std::move(result.rgbMatrix), ::std::move(result.distanceMatrix), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompRGBD::RGBD::GetDataResult>(responseCb, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getData, context);
    }

    void _iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::RGBD::GetDataResult>>&, const ::Ice::Context&);

    void getDepthInIR(::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetDepthInIRResult>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getDepthInIR, context).get();
        iceP_distanceMatrix = ::std::move(result.distanceMatrix);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getDepthInIRAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::RGBD::GetDepthInIRResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetDepthInIRResult, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getDepthInIR, context);
    }

    ::std::function<void()>
    getDepthInIRAsync(::std::function<void(::RoboCompRGBD::depthType, ::RoboCompJointMotor::MotorStateMap, ::RoboCompGenericBase::TBaseState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompRGBD::RGBD::GetDepthInIRResult&& result)
        {
            response(::std::move(result.distanceMatrix), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompRGBD::RGBD::GetDepthInIRResult>(responseCb, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getDepthInIR, context);
    }

    void _iceI_getDepthInIR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::RGBD::GetDepthInIRResult>>&, const ::Ice::Context&);

    void getImage(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetImageResult>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getImage, context).get();
        iceP_color = ::std::move(result.color);
        iceP_depth = ::std::move(result.depth);
        iceP_points = ::std::move(result.points);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getImageAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::RGBD::GetImageResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetImageResult, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getImage, context);
    }

    ::std::function<void()>
    getImageAsync(::std::function<void(::RoboCompRGBD::ColorSeq, ::RoboCompRGBD::DepthSeq, ::RoboCompRGBD::PointSeq, ::RoboCompJointMotor::MotorStateMap, ::RoboCompGenericBase::TBaseState)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompRGBD::RGBD::GetImageResult&& result)
        {
            response(::std::move(result.color), ::std::move(result.depth), ::std::move(result.points), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompRGBD::RGBD::GetImageResult>(responseCb, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getImage, context);
    }

    void _iceI_getImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::RGBD::GetImageResult>>&, const ::Ice::Context&);

    void getDepth(::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetDepthResult>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getDepth, context).get();
        iceP_depth = ::std::move(result.depth);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getDepthAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::RGBD::GetDepthResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetDepthResult, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getDepth, context);
    }

    ::std::function<void()>
    getDepthAsync(::std::function<void(::RoboCompRGBD::DepthSeq, ::RoboCompJointMotor::MotorStateMap, ::RoboCompGenericBase::TBaseState)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompRGBD::RGBD::GetDepthResult&& result)
        {
            response(::std::move(result.depth), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompRGBD::RGBD::GetDepthResult>(responseCb, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getDepth, context);
    }

    void _iceI_getDepth(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::RGBD::GetDepthResult>>&, const ::Ice::Context&);

    void getRGB(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetRGBResult>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getRGB, context).get();
        iceP_color = ::std::move(result.color);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getRGBAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::RGBD::GetRGBResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetRGBResult, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getRGB, context);
    }

    ::std::function<void()>
    getRGBAsync(::std::function<void(::RoboCompRGBD::ColorSeq, ::RoboCompJointMotor::MotorStateMap, ::RoboCompGenericBase::TBaseState)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompRGBD::RGBD::GetRGBResult&& result)
        {
            response(::std::move(result.color), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompRGBD::RGBD::GetRGBResult>(responseCb, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getRGB, context);
    }

    void _iceI_getRGB(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::RGBD::GetRGBResult>>&, const ::Ice::Context&);

    void getXYZ(::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetXYZResult>(true, this, &RoboCompRGBD::RGBDPrx::_iceI_getXYZ, context).get();
        iceP_points = ::std::move(result.points);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getXYZAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBD::RGBD::GetXYZResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBD::RGBD::GetXYZResult, P>(false, this, &RoboCompRGBD::RGBDPrx::_iceI_getXYZ, context);
    }

    ::std::function<void()>
    getXYZAsync(::std::function<void(::RoboCompRGBD::PointSeq, ::RoboCompJointMotor::MotorStateMap, ::RoboCompGenericBase::TBaseState)> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompRGBD::RGBD::GetXYZResult&& result)
        {
            response(::std::move(result.points), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompRGBD::RGBD::GetXYZResult>(responseCb, ex, sent, this, &RoboCompRGBD::RGBDPrx::_iceI_getXYZ, context);
    }

    void _iceI_getXYZ(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBD::RGBD::GetXYZResult>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    RGBDPrx() = default;
    friend ::std::shared_ptr<RGBDPrx> IceInternal::createProxy<RGBDPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompRGBD::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompRGBD::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::Registration>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits<::RoboCompRGBD::ColorRGB>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompRGBD::ColorRGB, S>
{
    static void read(S* istr, ::RoboCompRGBD::ColorRGB& v)
    {
        istr->readAll(v.red, v.green, v.blue);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBD::PointXYZ>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompRGBD::PointXYZ, S>
{
    static void read(S* istr, ::RoboCompRGBD::PointXYZ& v)
    {
        istr->readAll(v.x, v.y, v.z, v.w);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBD::CameraParameters>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompRGBD::CameraParameters, S>
{
    static void read(S* istr, ::RoboCompRGBD::CameraParameters& v)
    {
        istr->readAll(v.focal, v.width, v.height, v.size, v.FPS);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBD::TRGBDParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 48;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompRGBD::TRGBDParams, S>
{
    static void read(S* istr, ::RoboCompRGBD::TRGBDParams& v)
    {
        istr->readAll(v.color, v.depth, v.timerPeriod, v.talkToBase, v.talkToJointMotor, v.driver, v.device);
    }
};

}

namespace RoboCompRGBD
{

using RGBDPtr = ::std::shared_ptr<RGBD>;
using RGBDPrxPtr = ::std::shared_ptr<RGBDPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompRGBD
{

class RGBD;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBD::RGBD>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompRGBD::RGBD*);

}

}

namespace RoboCompRGBD
{

class RGBD;
::Ice::Object* upCast(::RoboCompRGBD::RGBD*);
typedef ::IceInternal::Handle< ::RoboCompRGBD::RGBD> RGBDPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBD::RGBD> RGBDPrx;
typedef RGBDPrx RGBDPrxPtr;
void _icePatchObjectPtr(RGBDPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompRGBD
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_id() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static HardwareFailedException _iceS_HardwareFailedException_init;

enum Registration
{
    None,
    DepthInColor,
    ColorInDepth
};

typedef ::std::vector< ::Ice::Byte> imgType;

typedef ::std::vector< ::Ice::Float> depthType;

struct ColorRGB
{
    ::Ice::Byte red;
    ::Ice::Byte green;
    ::Ice::Byte blue;

    bool operator==(const ColorRGB& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(red != rhs_.red)
        {
            return false;
        }
        if(green != rhs_.green)
        {
            return false;
        }
        if(blue != rhs_.blue)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ColorRGB& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(red < rhs_.red)
        {
            return true;
        }
        else if(rhs_.red < red)
        {
            return false;
        }
        if(green < rhs_.green)
        {
            return true;
        }
        else if(rhs_.green < green)
        {
            return false;
        }
        if(blue < rhs_.blue)
        {
            return true;
        }
        else if(rhs_.blue < blue)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ColorRGB& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const ColorRGB& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const ColorRGB& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const ColorRGB& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct PointXYZ
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float w;
};

typedef ::std::vector< ::Ice::Float> DepthSeq;

typedef ::std::vector< ::RoboCompRGBD::ColorRGB> ColorSeq;

typedef ::std::vector< ::RoboCompRGBD::PointXYZ> PointSeq;

struct CameraParameters
{
    ::Ice::Int focal;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int size;
    ::Ice::Int FPS;

    bool operator==(const CameraParameters& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(focal != rhs_.focal)
        {
            return false;
        }
        if(width != rhs_.width)
        {
            return false;
        }
        if(height != rhs_.height)
        {
            return false;
        }
        if(size != rhs_.size)
        {
            return false;
        }
        if(FPS != rhs_.FPS)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CameraParameters& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(focal < rhs_.focal)
        {
            return true;
        }
        else if(rhs_.focal < focal)
        {
            return false;
        }
        if(width < rhs_.width)
        {
            return true;
        }
        else if(rhs_.width < width)
        {
            return false;
        }
        if(height < rhs_.height)
        {
            return true;
        }
        else if(rhs_.height < height)
        {
            return false;
        }
        if(size < rhs_.size)
        {
            return true;
        }
        else if(rhs_.size < size)
        {
            return false;
        }
        if(FPS < rhs_.FPS)
        {
            return true;
        }
        else if(rhs_.FPS < FPS)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CameraParameters& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const CameraParameters& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const CameraParameters& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const CameraParameters& rhs_) const
    {
        return !operator<(rhs_);
    }
};

struct TRGBDParams
{
    ::RoboCompRGBD::CameraParameters color;
    ::RoboCompRGBD::CameraParameters depth;
    ::Ice::Int timerPeriod;
    bool talkToBase;
    bool talkToJointMotor;
    ::std::string driver;
    ::std::string device;

    bool operator==(const TRGBDParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(color != rhs_.color)
        {
            return false;
        }
        if(depth != rhs_.depth)
        {
            return false;
        }
        if(timerPeriod != rhs_.timerPeriod)
        {
            return false;
        }
        if(talkToBase != rhs_.talkToBase)
        {
            return false;
        }
        if(talkToJointMotor != rhs_.talkToJointMotor)
        {
            return false;
        }
        if(driver != rhs_.driver)
        {
            return false;
        }
        if(device != rhs_.device)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TRGBDParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(color < rhs_.color)
        {
            return true;
        }
        else if(rhs_.color < color)
        {
            return false;
        }
        if(depth < rhs_.depth)
        {
            return true;
        }
        else if(rhs_.depth < depth)
        {
            return false;
        }
        if(timerPeriod < rhs_.timerPeriod)
        {
            return true;
        }
        else if(rhs_.timerPeriod < timerPeriod)
        {
            return false;
        }
        if(talkToBase < rhs_.talkToBase)
        {
            return true;
        }
        else if(rhs_.talkToBase < talkToBase)
        {
            return false;
        }
        if(talkToJointMotor < rhs_.talkToJointMotor)
        {
            return true;
        }
        else if(rhs_.talkToJointMotor < talkToJointMotor)
        {
            return false;
        }
        if(driver < rhs_.driver)
        {
            return true;
        }
        else if(rhs_.driver < driver)
        {
            return false;
        }
        if(device < rhs_.device)
        {
            return true;
        }
        else if(rhs_.device < device)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TRGBDParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TRGBDParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TRGBDParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TRGBDParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace RoboCompRGBD
{

class Callback_RGBD_getRGBDParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getRGBDParams_Base> Callback_RGBD_getRGBDParamsPtr;

class Callback_RGBD_setRegistration_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_setRegistration_Base> Callback_RGBD_setRegistrationPtr;

class Callback_RGBD_getRegistration_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getRegistration_Base> Callback_RGBD_getRegistrationPtr;

class Callback_RGBD_getData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getData_Base> Callback_RGBD_getDataPtr;

class Callback_RGBD_getDepthInIR_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getDepthInIR_Base> Callback_RGBD_getDepthInIRPtr;

class Callback_RGBD_getImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getImage_Base> Callback_RGBD_getImagePtr;

class Callback_RGBD_getDepth_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getDepth_Base> Callback_RGBD_getDepthPtr;

class Callback_RGBD_getRGB_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getRGB_Base> Callback_RGBD_getRGBPtr;

class Callback_RGBD_getXYZ_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBD_getXYZ_Base> Callback_RGBD_getXYZPtr;

}

namespace IceProxy
{

namespace RoboCompRGBD
{

class RGBD : public virtual ::Ice::Proxy<RGBD, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRGBDParams(_iceI_begin_getRGBDParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRGBDParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBDParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBDParams(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::RoboCompRGBD::Callback_RGBD_getRGBDParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBDParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBDParams(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getRGBDParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBDParams(context, del, cookie);
    }

    ::RoboCompRGBD::TRGBDParams end_getRGBDParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRGBDParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setRegistration(_iceI_begin_setRegistration(iceP_value, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setRegistration(iceP_value, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setRegistration(iceP_value, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setRegistration(iceP_value, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration iceP_value, const ::RoboCompRGBD::Callback_RGBD_setRegistrationPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setRegistration(iceP_value, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setRegistration(::RoboCompRGBD::Registration iceP_value, const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_setRegistrationPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setRegistration(iceP_value, context, del, cookie);
    }

    void end_setRegistration(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setRegistration(::RoboCompRGBD::Registration, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompRGBD::Registration getRegistration(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getRegistration(_iceI_begin_getRegistration(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRegistration(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRegistration(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRegistration(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::RoboCompRGBD::Callback_RGBD_getRegistrationPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRegistration(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRegistration(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getRegistrationPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRegistration(context, del, cookie);
    }

    ::RoboCompRGBD::Registration end_getRegistration(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRegistration(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getData(::RoboCompRGBD::imgType& iceP_rgbMatrix, ::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getData(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState, _iceI_begin_getData(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getData(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::RoboCompRGBD::Callback_RGBD_getDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getDataPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(context, del, cookie);
    }

    void end_getData(::RoboCompRGBD::imgType& iceP_rgbMatrix, ::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getData(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getDepthInIR(::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getDepthInIR(iceP_distanceMatrix, iceP_hState, iceP_bState, _iceI_begin_getDepthInIR(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDepthInIR(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthInIR(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthInIR(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::RoboCompRGBD::Callback_RGBD_getDepthInIRPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthInIR(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepthInIR(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getDepthInIRPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepthInIR(context, del, cookie);
    }

    void end_getDepthInIR(::RoboCompRGBD::depthType& iceP_distanceMatrix, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDepthInIR(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getImage(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getImage(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState, _iceI_begin_getImage(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImage(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::RoboCompRGBD::Callback_RGBD_getImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImage(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImage(context, del, cookie);
    }

    void end_getImage(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImage(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getDepth(::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getDepth(iceP_depth, iceP_hState, iceP_bState, _iceI_begin_getDepth(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDepth(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::RoboCompRGBD::Callback_RGBD_getDepthPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDepth(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getDepthPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDepth(context, del, cookie);
    }

    void end_getDepth(::RoboCompRGBD::DepthSeq& iceP_depth, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDepth(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getRGB(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getRGB(iceP_color, iceP_hState, iceP_bState, _iceI_begin_getRGB(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRGB(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGB(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGB(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::RoboCompRGBD::Callback_RGBD_getRGBPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGB(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGB(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getRGBPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGB(context, del, cookie);
    }

    void end_getRGB(::RoboCompRGBD::ColorSeq& iceP_color, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRGB(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getXYZ(::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getXYZ(iceP_points, iceP_hState, iceP_bState, _iceI_begin_getXYZ(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getXYZ(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getXYZ(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getXYZ(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::RoboCompRGBD::Callback_RGBD_getXYZPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getXYZ(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getXYZ(const ::Ice::Context& context, const ::RoboCompRGBD::Callback_RGBD_getXYZPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getXYZ(context, del, cookie);
    }

    void end_getXYZ(::RoboCompRGBD::PointSeq& iceP_points, ::RoboCompJointMotor::MotorStateMap& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getXYZ(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompRGBD
{

class RGBD : public virtual ::Ice::Object
{
public:

    typedef RGBDPrx ProxyType;
    typedef RGBDPtr PointerType;

    virtual ~RGBD();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::RoboCompRGBD::TRGBDParams getRGBDParams(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getRGBDParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setRegistration(::RoboCompRGBD::Registration, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setRegistration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompRGBD::Registration getRegistration(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getRegistration(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getData(::RoboCompRGBD::imgType&, ::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDepthInIR(::RoboCompRGBD::depthType&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getDepthInIR(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImage(::RoboCompRGBD::ColorSeq&, ::RoboCompRGBD::DepthSeq&, ::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDepth(::RoboCompRGBD::DepthSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getDepth(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRGB(::RoboCompRGBD::ColorSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getRGB(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getXYZ(::RoboCompRGBD::PointSeq&, ::RoboCompJointMotor::MotorStateMap&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getXYZ(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const RGBD& lhs, const RGBD& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RGBD& lhs, const RGBD& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompRGBD::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBD::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompRGBD::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBD::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompRGBD::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::Registration>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompRGBD::ColorRGB>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBD::ColorRGB, S>
{
    static void write(S* ostr, const ::RoboCompRGBD::ColorRGB& v)
    {
        ostr->write(v.red);
        ostr->write(v.green);
        ostr->write(v.blue);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBD::ColorRGB, S>
{
    static void read(S* istr, ::RoboCompRGBD::ColorRGB& v)
    {
        istr->read(v.red);
        istr->read(v.green);
        istr->read(v.blue);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::PointXYZ>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBD::PointXYZ, S>
{
    static void write(S* ostr, const ::RoboCompRGBD::PointXYZ& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.w);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBD::PointXYZ, S>
{
    static void read(S* istr, ::RoboCompRGBD::PointXYZ& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.w);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::CameraParameters>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 20;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBD::CameraParameters, S>
{
    static void write(S* ostr, const ::RoboCompRGBD::CameraParameters& v)
    {
        ostr->write(v.focal);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.size);
        ostr->write(v.FPS);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBD::CameraParameters, S>
{
    static void read(S* istr, ::RoboCompRGBD::CameraParameters& v)
    {
        istr->read(v.focal);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.size);
        istr->read(v.FPS);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBD::TRGBDParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 48;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBD::TRGBDParams, S>
{
    static void write(S* ostr, const ::RoboCompRGBD::TRGBDParams& v)
    {
        ostr->write(v.color);
        ostr->write(v.depth);
        ostr->write(v.timerPeriod);
        ostr->write(v.talkToBase);
        ostr->write(v.talkToJointMotor);
        ostr->write(v.driver);
        ostr->write(v.device);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBD::TRGBDParams, S>
{
    static void read(S* istr, ::RoboCompRGBD::TRGBDParams& v)
    {
        istr->read(v.color);
        istr->read(v.depth);
        istr->read(v.timerPeriod);
        istr->read(v.talkToBase);
        istr->read(v.talkToJointMotor);
        istr->read(v.driver);
        istr->read(v.device);
    }
};

}

namespace RoboCompRGBD
{

template<class T>
class CallbackNC_RGBD_getRGBDParams : public Callback_RGBD_getRGBDParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::TRGBDParams&);

    CallbackNC_RGBD_getRGBDParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::TRGBDParams ret;
        try
        {
            ret = proxy->end_getRGBDParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGBDParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(T* instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGBDParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getRGBDParams : public Callback_RGBD_getRGBDParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::TRGBDParams&, const CT&);

    Callback_RGBD_getRGBDParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::TRGBDParams ret;
        try
        {
            ret = proxy->end_getRGBDParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGBDParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getRGBDParamsPtr
newCallback_RGBD_getRGBDParams(T* instance, void (T::*cb)(const ::RoboCompRGBD::TRGBDParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGBDParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_setRegistration : public Callback_RGBD_setRegistration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_RGBD_setRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setRegistration(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_setRegistration<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_setRegistration : public Callback_RGBD_setRegistration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_RGBD_setRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setRegistration(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_setRegistrationPtr
newCallback_RGBD_setRegistration(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_setRegistration<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getRegistration : public Callback_RGBD_getRegistration_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::RoboCompRGBD::Registration);

    CallbackNC_RGBD_getRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::Registration ret;
        try
        {
            ret = proxy->end_getRegistration(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompRGBD::Registration), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRegistration<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(T* instance, void (T::*cb)(::RoboCompRGBD::Registration), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRegistration<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getRegistration : public Callback_RGBD_getRegistration_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::RoboCompRGBD::Registration, const CT&);

    Callback_RGBD_getRegistration(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::Registration ret;
        try
        {
            ret = proxy->end_getRegistration(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(const IceUtil::Handle<T>& instance, void (T::*cb)(::RoboCompRGBD::Registration, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getRegistrationPtr
newCallback_RGBD_getRegistration(T* instance, void (T::*cb)(::RoboCompRGBD::Registration, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRegistration<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getData : public Callback_RGBD_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::imgType iceP_rgbMatrix;
        ::RoboCompRGBD::depthType iceP_distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getData(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(T* instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getData : public Callback_RGBD_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::imgType iceP_rgbMatrix;
        ::RoboCompRGBD::depthType iceP_distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getData(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_rgbMatrix, iceP_distanceMatrix, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getDataPtr
newCallback_RGBD_getData(T* instance, void (T::*cb)(const ::RoboCompRGBD::imgType&, const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getDepthInIR : public Callback_RGBD_getDepthInIR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getDepthInIR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::depthType iceP_distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getDepthInIR(iceP_distanceMatrix, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_distanceMatrix, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepthInIR<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(T* instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepthInIR<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getDepthInIR : public Callback_RGBD_getDepthInIR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getDepthInIR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::depthType iceP_distanceMatrix;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getDepthInIR(iceP_distanceMatrix, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_distanceMatrix, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepthInIR<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getDepthInIRPtr
newCallback_RGBD_getDepthInIR(T* instance, void (T::*cb)(const ::RoboCompRGBD::depthType&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepthInIR<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getImage : public Callback_RGBD_getImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::ColorSeq iceP_color;
        ::RoboCompRGBD::DepthSeq iceP_depth;
        ::RoboCompRGBD::PointSeq iceP_points;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getImage(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getImage : public Callback_RGBD_getImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::ColorSeq iceP_color;
        ::RoboCompRGBD::DepthSeq iceP_depth;
        ::RoboCompRGBD::PointSeq iceP_points;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getImage(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_color, iceP_depth, iceP_points, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getImagePtr
newCallback_RGBD_getImage(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompRGBD::DepthSeq&, const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getDepth : public Callback_RGBD_getDepth_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::DepthSeq iceP_depth;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getDepth(iceP_depth, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_depth, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepth<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(T* instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getDepth<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getDepth : public Callback_RGBD_getDepth_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getDepth(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::DepthSeq iceP_depth;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getDepth(iceP_depth, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_depth, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepth<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getDepthPtr
newCallback_RGBD_getDepth(T* instance, void (T::*cb)(const ::RoboCompRGBD::DepthSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getDepth<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getRGB : public Callback_RGBD_getRGB_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getRGB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::ColorSeq iceP_color;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getRGB(iceP_color, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_color, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGB<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getRGB<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getRGB : public Callback_RGBD_getRGB_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getRGB(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::ColorSeq iceP_color;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getRGB(iceP_color, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_color, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGB<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getRGBPtr
newCallback_RGBD_getRGB(T* instance, void (T::*cb)(const ::RoboCompRGBD::ColorSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getRGB<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBD_getXYZ : public Callback_RGBD_getXYZ_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_RGBD_getXYZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::PointSeq iceP_points;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getXYZ(iceP_points, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_points, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getXYZ<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(T* instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBD_getXYZ<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBD_getXYZ : public Callback_RGBD_getXYZ_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_RGBD_getXYZ(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBD::RGBDPrx proxy = ::RoboCompRGBD::RGBDPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBD::PointSeq iceP_points;
        ::RoboCompJointMotor::MotorStateMap iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getXYZ(iceP_points, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_points, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getXYZ<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBD_getXYZPtr
newCallback_RGBD_getXYZ(T* instance, void (T::*cb)(const ::RoboCompRGBD::PointSeq&, const ::RoboCompJointMotor::MotorStateMap&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBD_getXYZ<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
